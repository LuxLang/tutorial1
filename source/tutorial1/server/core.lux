##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;import lux
         (lux (data maybe
                    [text "Text/" Text/Eq]
                    [list "" List/Functor]
                    [number "Int/" Int/Codec@Text]
                    [array #+ Array]
                    text/format
                    error)
              host
              [meta]
              (meta [ast]
                    syntax)
              (concurrency [async #+ Async]))
         (.. ["&;" html]
             ["&;" css]))

## [Host]
(jvm-import java.lang.String
  (getBytes [] [] ByteArray))

## [Types]
(type: #export HttpMethod
  #GET
  #POST
  #PUT
  #DELETE
  #HEAD
  #PATCH
  #CONNECT
  #OPTIONS
  #TRACE)

(type: #export Port
  Int)

(type: #export HttpStatus
  Int)

(type: #export HttpHeaders
  (List [Text Text]))

(type: #export HttpParams
  (List [Text Text]))

(type: #export HttpBody
  ByteArray)

(type: #export URL
  Text)

(type: #export URI
  Text)

(type: #export HttpRequest
  {#request-method  HttpMethod
   #request-uri     URI
   #request-headers HttpHeaders
   #request-params  HttpParams
   #request-body    HttpBody})

(type: #export HttpResponse
  {#response-status  HttpStatus
   #response-headers HttpHeaders
   #response-body    HttpBody})

(type: #export RequestHandler
  (-> HttpRequest (Async HttpResponse)))

## [Values]
(def: #export empty-headers
  HttpHeaders
  (list))

## [Syntax]
(syntax: #export (@headers [headers (record^ (*^ (&^ text^ id^)))])
  (wrap (list (` (list (~@ (map (: (-> [Text AST] AST)
                                   (lambda [[key val]]
                                     (` [(~ (ast;text key)) (~ val)])))
                                headers)))))))

## [Values]
(def: empty-response-body (String.getBytes [] ""))

(def: #export (add-header name value headers)
  (-> Text Text HttpHeaders HttpHeaders)
  (#;Cons [name value] headers))

(do-template [<name> <type> <content-type>]
  [(def: #export (<name> value)
     (-> <type> HttpResponse)
     (let [value-bytes (String.getBytes [] value)]
       {#response-status 200
        #response-headers (|> empty-headers
                              (add-header "Content-Length" (Int/encode (array-length value-bytes)))
                              (add-header "Content-Type" <content-type>))
        #response-body value-bytes}))]

  [html-response &html;Html "text/html"]
  [css-response  &css;CSS   "text/css"]
  )

(def: #export (redirect to)
  (-> URL HttpResponse)
  {#response-status 307
   #response-headers (|> empty-headers
                         (add-header "Content-Length" "0")
                         (add-header "Content-Type" "text/html")
                         (add-header "Location" to))
   #response-body empty-response-body})

(def: #export (HttpMethod$ name)
  (-> Text (Maybe HttpMethod))
  (case name
    "GET"     (#;Some #GET)
    "POST"    (#;Some #POST)
    "PUT"     (#;Some #PUT)
    "DELETE"  (#;Some #DELETE)
    "HEAD"    (#;Some #HEAD)
    "PATCH"   (#;Some #PATCH)
    "CONNECT" (#;Some #CONNECT)
    "TRACE"   (#;Some #TRACE)
    "OPTIONS" (#;Some #OPTIONS)
    _         #;None))

(def: #export (param-exists? name)
  (-> Text HttpParams Bool)
  (list;any? (lambda [[k v]] (Text/= name k))))

(do-template [<name> <type> <desc>]
  [(def: #export (<name> name data)
     (-> Text <type> (Error Text))
     (case (list;some (lambda [[k v]]
                        (if (Text/= name k)
                          (#;Some v)
                          #;None))
                      data)
       (#;Some value)
       (#;Right value)

       #;None
       (#;Left (<> <desc> " not found: " name))))]

  [get-header HttpHeaders "Header"]
  [get-param  HttpParams  "Parameter"]
  )
