##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (control monad)
       (data maybe
             [text "Text/" Eq<Text>]
             [number "Int/" Codec<Text,Int>]
             text/format
             error
             (struct [list "" Functor<List>]
                     [array #+ Array]))
       host
       [compiler]
       (macro [ast]
              ["s" syntax #+ Syntax syntax:])
       (concurrency [promise #+ Promise]))
  (.. ["&;" html]
      ["&;" css])
  )

## [Host]
(jvm-import java.lang.String
  (getBytes [] Byte-Array))

## [Types]
(type: #export HTTP-Method
  #GET
  #POST
  #PUT
  #DELETE
  #HEAD
  #PATCH
  #CONNECT
  #OPTIONS
  #TRACE)

(type: #export Port
  Nat)

(type: #export HTTP-Status
  Nat)

(type: #export HTTP-Headers
  (List [Text Text]))

(type: #export HTTP-Params
  (List [Text Text]))

(type: #export HTTP-Body
  Byte-Array)

(type: #export URL
  Text)

(type: #export URI
  Text)

(type: #export HTTP-Request
  {#request-method  HTTP-Method
   #request-uri     URI
   #request-headers HTTP-Headers
   #request-params  HTTP-Params
   #request-body    HTTP-Body})

(type: #export HTTP-Response
  {#response-status  HTTP-Status
   #response-headers HTTP-Headers
   #response-body    HTTP-Body})

(type: #export Request-Handler
  (-> HTTP-Request (Promise HTTP-Response)))

## [Values]
(def: #export empty-headers
  HTTP-Headers
  (list))

## [Syntax]
(syntax: #export (headers [headers (s;record (s;some (s;seq s;text s;any)))])
  (wrap (list (` (list (~@ (map (: (-> [Text AST] AST)
                                   (lambda [[key val]]
                                     (` [(~ (ast;text key)) (~ val)])))
                                headers)))))))

## [Values]
(def: empty-response-body (String.getBytes [] ""))

(def: #export (add-header name value headers)
  (-> Text Text HTTP-Headers HTTP-Headers)
  (#;Cons [name value] headers))

(do-template [<name> <type> <content-type>]
  [(def: #export (<name> value)
     (-> <type> HTTP-Response)
     (let [value-bytes (String.getBytes [] value)]
       {#response-status +200
        #response-headers (|> empty-headers
                              (add-header "Content-Length" (Int/encode (nat-to-int (array-length value-bytes))))
                              (add-header "Content-Type" <content-type>))
        #response-body value-bytes}))]

  [html-response &html;Html "text/html"]
  [css-response  &css;CSS   "text/css"]
  )

(def: #export (redirect to)
  (-> URL HTTP-Response)
  {#response-status +307
   #response-headers (|> empty-headers
                         (add-header "Content-Length" "0")
                         (add-header "Content-Type" "text/html")
                         (add-header "Location" to))
   #response-body empty-response-body})

(def: #export (HTTP-Method$ name)
  (-> Text (Maybe HTTP-Method))
  (case name
    "GET"     (#;Some #GET)
    "POST"    (#;Some #POST)
    "PUT"     (#;Some #PUT)
    "DELETE"  (#;Some #DELETE)
    "HEAD"    (#;Some #HEAD)
    "PATCH"   (#;Some #PATCH)
    "CONNECT" (#;Some #CONNECT)
    "TRACE"   (#;Some #TRACE)
    "OPTIONS" (#;Some #OPTIONS)
    _         #;None))

(def: #export (param-exists? name)
  (-> Text HTTP-Params Bool)
  (list;any? (lambda [[k v]] (Text/= name k))))

(do-template [<name> <type> <desc>]
  [(def: #export (<name> name data)
     (-> Text <type> (Error Text))
     (case (list;find (lambda [[k v]]
                        (Text/= name k))
                      data)
       (#;Some [k value])
       (#;Right value)

       #;None
       (#;Left (format <desc> " not found: " name))))]

  [get-header HTTP-Headers "Header"]
  [get-param  HTTP-Params  "Parameter"]
  )
