##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;import lux
         (lux (control monad
                       eq)
              (data maybe
                    [list "" List/Fold "List/" List/Monad]
                    text/format
                    [product])
              (codata io)
              host)
         (.. ["&" core]
             ["&;" state]
             ["&;" util]
             (server ["&;" html]
                     ["&;" css])))

## [Types]
(type: #export DisplayFilter
  {#;doc "Models the different filter views."}
  #All
  #Active
  #Completed)

## [Structs]
(struct: DisplayFilter/Eq (Eq DisplayFilter)
  (def: (= x y)
    (case [x y]
      (\template [<tag>]
       [<tag> <tag>]
       true)
      ([#All] [#Active] [#Completed])
      
      _
      false)))

## [Values]
(def: #export css
  {#;doc "The entire CSS style-sheet for the UI."}
  &css;CSS
  (&css;@css
   (List/join
    (list (&css;rule "body"
                     {"font" "14px 'Helvetica Neue', Helvetica, Arial, sans-serif"
                      "line-height" "1.4em"
                      "background" "#f5f5f5"
                      "color" "#4d4d4d"
                      "min-width" "230px"
                      "max-width" "550px"
                      "margin" "0 auto"
                      "-webkit-font-smoothing" "antialiased"
                      "-moz-font-smoothing" "antialiased"
                      "font-smoothing" "antialiased"
                      "font-weight" "300"})
          (&css;rule ".todo"
                     {"background" "#fff"
                      "margin" "130px 0 40px 0"
                      "position" "relative"
                      "box-shadow" "0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 25px 50px 0 rgba(0, 0, 0, 0.1)"}
                     (&css;rule "> .header"
                                {"display" "block"}
                                (&css;rule "> .new-task-form"
                                           {"display" "block"
                                            "margin-top" "0em"}
                                           (&css;rule "> .new-task-input"
                                                      {"padding" "16px 16px 16px 60px"
                                                       "border" "none"
                                                       "width" "85%"
                                                       "background" "rgba(0, 0, 0, 0.003)"
                                                       }
                                                      )
                                           (&css;rule "> .new-task-submit"
                                                      {"background-color" "inherit"
                                                       "border" "none"
                                                       "font-weight" "bold"
                                                       "font-size" "1.25em"
                                                       "cursor" "pointer"}
                                                      ))
                                )
                     (&css;rule "> .task-list"
                                {"border-top" "1px solid #e6e6e6"
                                 "margin" "0"
                                 "padding" "0"}
                                (&css;rule "> .task"
                                           {"position" "relative"
                                            "font-size" "24px"
                                            "border-bottom" "1px solid #ededed"}
                                           (&css;rule "> .completed-toggle"
                                                      {"color" "#ededed"
                                                       "text-decoration" "none"})
                                           (&css;rule "> .task-description"
                                                      {"white-space" "pre-line"
                                                       "word-break" "break-all"
                                                       "line-height" "1.2"})
                                           (&css;rule "> .delete-button"
                                                      {"color" "#af5b5e"
                                                       "text-decoration" "none"
                                                       "float" "right"
                                                       "margin-top" "0.125em"
                                                       "margin-right" "0.5em"
                                                       }))
                                (&css;rule "> .task.completed"
                                           {}
                                           (&css;rule "> .completed-toggle"
                                                      {"color" "#bddad5"})
                                           (&css;rule "> .task-description"
                                                      {"color" "#d9d9d9"
                                                       "text-decoration" "line-through"})
                                           ))
                     (&css;rule "> .footer"
                                {"color" "#777"
                                 "padding" "10px 15px"
                                 "height" "20px"
                                 "text-align" "center"
                                 "border-top" "1px solid #e6e6e6"}
                                (&css;rule "> .tasks-left"
                                           {"float" "left"
                                            "text-align" "left"})
                                (&css;rule "> .filters"
                                           {"margin" "0"
                                            "padding" "0"
                                            "position" "absolute"
                                            "right" "0"
                                            "left" "0"}
                                           (&css;rule "> .filter"
                                                      {"color" "inherit"
                                                       "margin" "3px"
                                                       "padding" "3px 7px"
                                                       "text-decoration" "none"
                                                       "border" "1px solid transparent"
                                                       "border-radius" "3px"})
                                           (&css;rule "> .filter.active"
                                                      {"border-color" "rgba(175, 47, 47, 0.2)"}))
                                (&css;rule "> .clear-completed"
                                           {"float" "right"
                                            "position" "relative"
                                            "line-height" "20px"
                                            "text-decoration" "none"
                                            "cursor" "pointer"
                                            "position" "relative"
                                            "color" "inherit"}))
                     )
          ))))

(def: (task-button$ path css-class label idx)
  (-> Text Text Text Int &html;Html)
  (&html;a {"class" css-class
            "href" (<> path "?id=" (%i idx))}
           label))

(def: done-label     Text "&#9745;")  ## check-mark
(def: not-done-label Text "&#9744;")  ## no-entry sign
(def: delete-label   Text "&#10060;") ## X-mark

(def: (task$ [task-idx task])
  (-> [Int &;Task] &html;Html)
  (let [(\slots [#&;completed? #&;description]) task]
    (&html;div {"class" (<> "task" (if completed? " completed" ""))}
               (task-button$ &util;toggle-path
                             "completed-toggle"
                             (if completed? done-label not-done-label)
                             task-idx)
               (&html;span {"class" "task-description"}
                           description)
               (task-button$ &util;delete-path
                             "delete-button"
                             delete-label
                             task-idx))))

(def: new-task-form$
  &html;Html
  (&html;form {"class" "new-task-form"
               "method" "post"
               "action" "/"}
              (&html;input {"class" "new-task-input"
                            "type" "text"
                            "name" "todo"
                            "placeholder" "What needs to be done?"})
              (&html;input {"class" "new-task-submit"
                            "type" "submit"
                            "value" "Submit"})))

(def: (tasks-left$ amount)
  (-> Int &html;Html)
  (&html;span {"class" "tasks-left"}
              (<> (%i amount) " items left")))

(def: (filters$ active)
  (-> DisplayFilter &html;Html)
  (let [(\open) DisplayFilter/Eq]
    (let% [<filters> (do-template [<tag> <label> <path>]
                       [(&html;a {"class" (<> "filter" (if (= <tag> active) " active" "")) "href" <path>} <label>)]

                       [#All       "All"       &util;all-path]
                       [#Active    "Active"    &util;active-path]
                       [#Completed "Completed" &util;completed-path])]
      (&html;div {"class" "filters"}
                 <filters>))))

(def: (clear-completed$ show-clear-completed?)
  (-> Bool &html;Html)
  (if show-clear-completed?
    (&html;a {"class" "clear-completed" "href" &util;clear-completed-path} "Clear completed")
    (&html;span {} "")))

(def: task-list$
  (-> &state;AppData &html;Html)
  (. (&html;div' (&html;@attrs {"class" "task-list"}))
     (List/map task$)))

(def: #export (todo$ show-clear-completed? tasks-left active-filter tasks)
  (-> Bool Int DisplayFilter &state;AppData &html;Html)
  (&html;div {"class" "todo"}
             (&html;div {"class" "header"}
                        new-task-form$)
             (task-list$ tasks)
             (&html;div {"class" "footer"}
                        (tasks-left$ tasks-left)
                        (filters$ active-filter)
                        (clear-completed$ show-clear-completed?))
             ))

(def: #export (show-clear-completed? state)
  (-> &state;AppState (IO Bool))
  (do IO/Monad
    [tasks (&state;get-task-list state)]
    (wrap (> 0 (&state;num-completed-tasks tasks)))))

(def: #export (page$ content)
  (-> &html;Html &html;Html)
  (&html;node "html" (&html;@attrs {})
              (list (&html;head {}
                                (&html;title {} &util;page-title)
                                (&html;link {"rel" "stylesheet"
                                             "type" "text/css"
                                             "href" &util;css-path}))
                    (&html;body {}
                                content))))

(def: #export (filter-tasks display-filter tasks)
  (-> DisplayFilter &state;AppData &state;AppData)
  (case display-filter
    #All       tasks
    #Active    (list;filter (. &state;active-task? product;right)    tasks)
    #Completed (list;filter (. &state;completed-task? product;right) tasks)))
