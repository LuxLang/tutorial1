##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (control monad
                eq)
       (data maybe
             [product]
             [number]
             (struct [list "" Functor<List>]
                     [dict]))
       (codata [io #- run])
       host
       (concurrency [stm]))
  (.. ["&" core]))

## [Types]
(type: #export App-State
  {#;doc "The next-ID for a task, and the collection of tasks."}
  (stm;Var [Nat (dict;Dict Nat &;Task)]))

(type: #export App-Data
  {#;doc "App-data, as can be rendered onto HTML."}
  (List [Nat &;Task]))

## [Values]
(def: #export gen-state
  {#;doc "A procedure for generating an initial app-state."}
  (IO App-State)
  (io (stm;var [+0 (dict;new number;Hash<Nat>)])))

(do-template [<name> <filter> <post>]
  [(def: #export <filter>
     (-> &;Task Bool)
     (|>. (get@ #&;completed?)
          <post>))

   (def: #export <name>
     (-> App-Data Nat)
     (|>. (list;filter (|>. product;right <filter>))
          list;size))]

  [num-active-tasks    active-task?    not]
  [num-completed-tasks completed-task? id]
  )

(def: #export (get-task-list !state)
  (-> App-State (IO App-Data))
  (do Monad<IO>
    [[next-id data] (stm;read! !state)]
    (wrap (list;sort (lambda [[idl _] [idr _]] (n.< idl idr))
                     (dict;entries data)))))

(def: #export (add-task task-desc !state)
  (-> Text App-State (IO Bool))
  (do Monad<IO>
    [[next-id data] (stm;read! !state)
     #let [task {#&;completed? false
                 #&;description task-desc}
           data' (dict;put next-id task data)]
     _ (stm;write! [(n.inc next-id) data']
                   !state)]
    (wrap true)))

(def: #export (toggle-task idx !state)
  (-> Nat App-State (IO Bool))
  (do Monad<IO>
    [[next-id data] (stm;read! !state)]
    (case (dict;get idx data)
      (#;Some task)
      (do @
        [#let [data' (dict;put idx (update@ #&;completed? not task) data)]
         _ (stm;write! [next-id data'] !state)]
        (wrap true))

      #;None
      (:: Monad<IO> wrap false))))

(def: #export (delete-task idx !state)
  (-> Nat App-State (IO Bool))
  (do Monad<IO>
    [[next-id data] (stm;read! !state)]
    (case (dict;get idx data)
      (#;Some task)
      (do @
        [_ (stm;write! [next-id (dict;remove idx data)] !state)]
        (wrap true))

      #;None
      (:: Monad<IO> wrap false))))

(def: #export (clear-completed state)
  (-> App-State (IO Bool))
  (do Monad<IO>
    [task-list (get-task-list state)
     _ (|> task-list
           list;reverse
           (mapM @
                 (: (-> [Nat &;Task] (IO Bool))
                    (lambda [[idx task]]
                      (if (completed-task? task)
                        (delete-task idx state)
                        (wrap true))))))]
    (wrap true)))
