##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;import lux
         (lux (control monad)
              (codata [io #- run])
              (data [list "" List/Functor List/Fold "List/" List/Monoid]
                    maybe
                    [text]
                    text/format)
              host
              (concurrency async)
              [hack])
         (.. (core #as &)))

## [Host]
(jvm-import java.lang.Object
  (toString [] [] String))

(jvm-import io.vertx.core.Verticle)

(jvm-import io.vertx.core.http.HttpMethod)

(jvm-import (io.vertx.core.Handler a))

(jvm-import io.vertx.core.buffer.Buffer
  (#static buffer [] [ByteArray] Buffer)
  (getBytes [] [] ByteArray))

(jvm-import (java.util.Map$Entry k v)
  (getKey [] [] k)
  (getValue [] [] v))

(jvm-import (java.util.Iterator e)
  (hasNext [] [] boolean)
  (next [] [] e))

(jvm-import (java.lang.Iterable e)
  (iterator [] [] (java.util.Iterator e)))

(jvm-import #long (java.util.List e)
  (size [] [] int)
  (get [] [int] e))

(jvm-import #long (java.util.Set e))

(jvm-import io.vertx.core.MultiMap
  (add [] [String String] MultiMap)
  (entries [] [] (java.util.List (Map$Entry String String)))
  (names [] [] (java.util.Set String)))

(jvm-import io.vertx.core.http.HttpServerResponse
  (headers [] [] MultiMap)
  (setStatusCode [] [int] HttpServerResponse)
  (write [] [Buffer] HttpServerResponse)
  (end [] [] void))

(jvm-import io.vertx.core.http.HttpServerRequest
  (method [] [] HttpMethod)
  (uri [] [] String)
  (headers [] [] MultiMap)
  (params [] [] MultiMap)
  (formAttributes [] [] MultiMap)
  (response [] [] #io HttpServerResponse)
  (bodyHandler [] [(Handler Buffer)] HttpServerRequest)
  (setExpectMultipart [] [boolean] HttpServerRequest))

(jvm-import io.vertx.core.http.HttpServer
  (listen [] [int] #io HttpServer)
  (requestHandler [] [(Handler HttpServerRequest)] #io HttpServer))

(jvm-import io.vertx.core.Vertx
  (#static vertx [] [] #io Vertx)
  (createHttpServer [] [] #io HttpServer)
  (deployVerticle   [] [Verticle] #io void))

(jvm-import io.vertx.core.Future)

(jvm-import io.vertx.core.AbstractVerticle)

## [Functions]
(def: (extract-param entries idx)
  (-> (java.util.List (Map$Entry Text Text)) Int [Text Text])
  (let [entry (java.util.List.get [(l2i idx)] entries)]
    [(Map$Entry.getKey [] entry) (Map$Entry.getValue [] entry)]))

(do-template [<name> <method> <type>]
  [(def: (<name> req)
     (-> HttpServerRequest <type>)
     (let [entries (|> req (<method> []) (MultiMap.entries []))]
       (map (extract-param entries)
            (list;range 0 (dec (i2l (java.util.List.size [] entries)))))))]

  [get-headers      HttpServerRequest.headers        &;HttpHeaders]
  [get-query-params HttpServerRequest.params         &;HttpParams]
  [get-form-params  HttpServerRequest.formAttributes &;HttpParams]
  )

(def: (get-params req)
  (-> HttpServerRequest &;HttpParams)
  (List/++ (get-query-params req) (get-form-params req)))

(def: (respond! response request)
  (-> &;HttpResponse HttpServerRequest (IO Unit))
  (do IO/Monad
    [#let [(\slots [#&;response-status #&;response-headers #&;response-body]) response]
     $response (HttpServerRequest.response [] request)
     #let [_ (HttpServerResponse.setStatusCode [(l2i response-status)] $response)
           mm (fold (: (-> [Text Text] MultiMap MultiMap)
                       (lambda [pair headers] (MultiMap.add pair headers)))
                    (HttpServerResponse.headers [] $response)
                    response-headers)
           _ (HttpServerResponse.write [(Buffer.buffer [response-body])] $response)
           _ (HttpServerResponse.end [] $response)]]
    (wrap [])))

(def: (iterator->list iter)
  (All [a] (-> (Iterator a) (List a)))
  (if (Iterator.hasNext [] iter)
    (#;Cons (Iterator.next [] iter)
            (iterator->list iter))
    #;Nil))

(def: (request$ req body)
  (-> HttpServerRequest &;HttpBody &;HttpRequest)
  {#&;request-method (|> req (HttpServerRequest.method []) (Object.toString []) &;HttpMethod$ (? #&;OPTIONS))
   #&;request-uri    (let [raw-uri (HttpServerRequest.uri [] req)]
                       (? raw-uri
                          (do Maybe/Monad
                            [[uri params] (text;split-with "?" raw-uri)]
                            (wrap uri))))
   #&;request-headers  (get-headers req)
   #&;request-params (get-params req)
   #&;request-body   body})

(def: (body-handler k)
  (-> (-> Buffer (Async Unit)) (Handler Buffer))
  (object [(Handler Buffer)]
    []
    ((Handler A) handle [] [(body A)] void
     (exec (k body)
       []))
    ))

(def: (http-handler server)
  (-> &;RequestHandler (Handler HttpServerRequest))
  (object [(Handler HttpServerRequest)]
    []
    ((Handler A) handle [] [(vreq A)] void
     (exec (|> vreq
               (HttpServerRequest.setExpectMultipart [true])
               (HttpServerRequest.bodyHandler
                [(body-handler (lambda [body']
                                 (do Async/Monad
                                   [#let [body (Buffer.getBytes [] body')
                                          request (request$ vreq body)]
                                    response (server request)
                                    _ (future (respond! response vreq))]
                                   (wrap [])
                                   )))]))
       []))))

(def: (verticle$ port server-fun vertx)
  (-> &;Port &;RequestHandler Vertx Verticle)
  (object AbstractVerticle []
    []
    (AbstractVerticle start [] [(start Future)] void
                      (exec (io;run (do IO/Monad
                                      [http-server (Vertx.createHttpServer [] vertx)
                                       _ (HttpServer.requestHandler [(http-handler server-fun)] http-server)]
                                      (HttpServer.listen [(l2i port)] http-server)))
                        []))

    (AbstractVerticle stop [] [(stop Future)] void #throws [java.lang.Exception]
                      (hack;log! "Verticle stopped!"))))

(def: #export (deploy-server port handler)
  (-> &;Port &;RequestHandler (IO Unit))
  (do IO/Monad
    [vertx (Vertx.vertx [])]
    (Vertx.deployVerticle [(verticle$ port handler vertx)]
                          vertx)))
