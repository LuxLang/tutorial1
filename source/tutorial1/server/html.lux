##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;import lux
         (lux (data [text "Text/" Text/Monoid]
                    text/format
                    [list "" List/Functor List/Fold])
              [meta]
              (meta syntax
                    [ast])))

## [Types]
(type: #export Html Text)

(type: #export Attributes
  {#;doc "Attributes for an HTML tag."}
  (List [Text Text]))

## [Syntax]
(def: attributes^
  (Syntax (List [Text AST]))
  (record^ (*^ (&^ text^ id^))))

(syntax: #export (@attrs [attrs attributes^])
  {#;doc "Macro for turning simple record-syntax with text-tags into HTML tag attributes."}
  (wrap (list (` (: Attributes
                    (list (~@ (map (: (-> [Text AST] AST)
                                      (lambda [[key val]]
                                        (` [(~ (ast;text key)) (~ val)])))
                                   attrs))))))))

(syntax: #export (%tag% [name local-symbol^])
  {#;doc "Given the name of a tag-macro, generates it's text form."}
  (wrap (list (ast;text name))))

(syntax: #export (%tag-func-name% [name local-symbol^])
  {#;doc "Given the name of a tag-macro, generates the name for a tag-function."}
  (wrap (list (ast;symbol ["" (Text/++ name "'")]))))

## [Functions]
(def: (attrs->text attrs)
  (-> Attributes Text)
  (|> attrs
      (map (lambda [[key val]] (<> key "=" "\"" val "\"")))
      (text;join-with " ")))

(def: #export (node name attrs children)
  {#;doc "Generates the HTML for a node."}
  (-> Text Attributes (List Html) Html)
  (<> "<" name " " (attrs->text attrs) ">" (text;join-with " " children) "</" name ">"))

(do-template [<name>]
  [(let% [<fun-name> (%tag-func-name% <name>)]
     ## Simple functions to avoid calling 'node' directly.
     (def: #export <fun-name>
       (node (%tag% <name>)))

     ## These macros just simplify HTML construction by saving people
     ## from having to constantly call the @attrs macro and passing
     ## children lists.
     (syntax: #export (<name> attrs [children (*^ id^)])
       (let [attrs' (case attrs
                      [_ (#;RecordS _)]
                      (` (@attrs (~ attrs)))

                      _
                      attrs)]
         (wrap (list (` (<fun-name> (~ attrs') (list (~@ children)))))))))]

  ## Head
  [head]
  [meta]
  [link]
  [title]
  ## Body
  [body]
  [div]
  [span]
  [a]
  [form]
  [input]
  )
