##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (control monad)
       (codata [io #- run])
       (data maybe
             [text]
             text/format
             (struct [list "" Functor<List> Fold<List> "List/" Monoid<List>]))
       host
       (concurrency promise))
  (.. (core #as &)))

## [Host]
(jvm-import java.lang.Object
  (toString [] String))

(jvm-import io.vertx.core.Verticle)

(jvm-import io.vertx.core.http.HttpMethod)

(jvm-import (io.vertx.core.Handler a))

(jvm-import io.vertx.core.buffer.Buffer
  (#static buffer [Byte-Array] Buffer)
  (getBytes [] Byte-Array))

(jvm-import (java.util.Map$Entry k v)
  (getKey [] k)
  (getValue [] v))

(jvm-import (java.util.Iterator e)
  (hasNext [] boolean)
  (next [] e))

(jvm-import (java.lang.Iterable e)
  (iterator [] (java.util.Iterator e)))

(jvm-import #long (java.util.List e)
  (size [] int)
  (get [int] e))

(jvm-import #long (java.util.Set e))

(jvm-import io.vertx.core.MultiMap
  (add [String String] MultiMap)
  (entries [] (java.util.List (Map$Entry String String)))
  (names [] (java.util.Set String)))

(jvm-import io.vertx.core.http.HttpServerResponse
  (headers [] MultiMap)
  (setStatusCode [int] HttpServerResponse)
  (write [Buffer] HttpServerResponse)
  (end [] void))

(jvm-import io.vertx.core.http.HttpServerRequest
  (method [] HttpMethod)
  (uri [] String)
  (headers [] MultiMap)
  (params [] MultiMap)
  (formAttributes [] MultiMap)
  (response [] #io HttpServerResponse)
  (bodyHandler [(Handler Buffer)] HttpServerRequest)
  (setExpectMultipart [boolean] HttpServerRequest))

(jvm-import io.vertx.core.http.HttpServer
  (listen [int] #io HttpServer)
  (requestHandler [(Handler HttpServerRequest)] #io HttpServer))

(jvm-import io.vertx.core.Vertx
  (#static vertx [] #io Vertx)
  (createHttpServer [] #io HttpServer)
  (deployVerticle [Verticle] #io void))

(jvm-import io.vertx.core.Future)

(jvm-import io.vertx.core.AbstractVerticle)

## [Functions]
(def: (extract-param entries idx)
  (-> (java.util.List (Map$Entry Text Text)) Int [Text Text])
  (let [entry (java.util.List.get [idx] entries)]
    [(Map$Entry.getKey [] entry) (Map$Entry.getValue [] entry)]))

(do-template [<name> <method> <type>]
  [(def: (<name> req)
     (-> HttpServerRequest <type>)
     (let [entries (|> req (<method> []) (MultiMap.entries []))]
       (map (extract-param entries)
            (list;i.range 0 (i.dec (java.util.List.size [] entries))))))]

  [get-headers      HttpServerRequest.headers        &;HTTP-Headers]
  [get-query-params HttpServerRequest.params         &;HTTP-Params]
  [get-form-params  HttpServerRequest.formAttributes &;HTTP-Params]
  )

(def: (get-params req)
  (-> HttpServerRequest &;HTTP-Params)
  (List/append (get-query-params req) (get-form-params req)))

(def: (respond! response request)
  (-> &;HTTP-Response HttpServerRequest (IO Unit))
  (do Monad<IO>
    [#let [(^slots [#&;response-status #&;response-headers #&;response-body]) response]
     $response (HttpServerRequest.response [] request)
     #let [_ (HttpServerResponse.setStatusCode [(nat-to-int response-status)] $response)
           mm (fold (: (-> [Text Text] MultiMap MultiMap)
                       (lambda [pair headers] (MultiMap.add pair headers)))
                    (HttpServerResponse.headers [] $response)
                    response-headers)
           _ (HttpServerResponse.write [(Buffer.buffer [response-body])] $response)
           _ (HttpServerResponse.end [] $response)]]
    (wrap [])))

(def: (iterator->list iter)
  (All [a] (-> (Iterator a) (List a)))
  (if (Iterator.hasNext [] iter)
    (#;Cons (Iterator.next [] iter)
            (iterator->list iter))
    #;Nil))

(def: (request$ req body)
  (-> HttpServerRequest &;HTTP-Body &;HTTP-Request)
  {#&;request-method (|> req (HttpServerRequest.method []) (Object.toString []) &;HTTP-Method$ (default #&;OPTIONS))
   #&;request-uri (let [raw-uri (HttpServerRequest.uri [] req)]
                    (default raw-uri
                      (do Monad<Maybe>
                        [[uri params] (text;split-with "?" raw-uri)]
                        (wrap uri))))
   #&;request-headers (get-headers req)
   #&;request-params (get-params req)
   #&;request-body body})

(def: (body-handler k)
  (-> (-> Buffer (Promise Unit)) (Handler Buffer))
  (object [(Handler Buffer)]
    []
    ((Handler A) (handle [body A]) void
     (exec (k body)
       []))
    ))

(def: (http-handler server)
  (-> &;Request-Handler (Handler HttpServerRequest))
  (object [(Handler HttpServerRequest)]
    []
    ((Handler A) (handle [vreq A]) void
     (exec (|> vreq
               (HttpServerRequest.setExpectMultipart [true])
               (HttpServerRequest.bodyHandler
                [(body-handler (lambda [body']
                                 (do Monad<Promise>
                                   [#let [body (Buffer.getBytes [] body')
                                          request (request$ vreq body)]
                                    response (server request)
                                    _ (future (respond! response vreq))]
                                   (wrap [])
                                   )))]))
       []))))

(def: (verticle$ port server-fun vertx)
  (-> &;Port &;Request-Handler Vertx Verticle)
  (object AbstractVerticle []
    []
    (AbstractVerticle (start [start Future]) void
                      (exec (io;run (do Monad<IO>
                                      [http-server (Vertx.createHttpServer [] vertx)
                                       _ (HttpServer.requestHandler [(http-handler server-fun)] http-server)]
                                      (HttpServer.listen [(nat-to-int port)] http-server)))
                        []))

    (AbstractVerticle (stop [stop Future]) void #throws [java.lang.Exception]
                      (log! "Verticle stopped!"))))

(def: #export (deploy-server port handler)
  (-> &;Port &;Request-Handler (IO Unit))
  (do Monad<IO>
    [vertx (Vertx.vertx [])]
    (Vertx.deployVerticle [(verticle$ port handler vertx)]
                          vertx)))
