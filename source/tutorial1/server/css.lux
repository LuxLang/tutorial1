##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;module:
  lux
  (lux (control ["M" monad])
       (data [text "Text/" Monoid<Text>]
             text/format
             (struct [list #* "" Functor<List> Fold<List>]))
       [compiler]
       (macro ["s" syntax #+ Syntax syntax:]
              [ast])))

## [Types]
(type: #export Selector
  Text)

(type: #export Style
  {#;doc "The properties associated with a CSS selector."}
  (List [Text Text]))

(type: #export Css-Rule Text)

(type: #export Rule-Set (List Css-Rule))

(type: #export CSS Text)

## [Syntax]
(def: style^
  (Syntax (List [Text AST]))
  (s;record (s;some (s;seq s;text s;any))))

(syntax: #export (style [style style^])
  (wrap (list (` (: Style
                    (list (~@ (map (: (-> [Text AST] AST)
                                      (lambda [[key val]]
                                        (` [(~ (ast;text key)) (~ val)])))
                                   style))))))))

## [Functions]
(def: (style->text style)
  (-> Style Text)
  (|> style
      (map (lambda [[key val]] (format key ": " val)))
      (text;join-with "; ")))

(def: #export (rule' selector style children)
  (-> Selector Style Rule-Set Rule-Set)
  (let [selector-prefix (format selector " ")]
    (list& (format selector-prefix "{" (style->text style) "}")
           (map (Text/append selector-prefix) children))))

(syntax: #export (rule [selector s;any] style [children (s;some s;any)])
  (let [style' (case style
                 [_ (#;RecordS _)]
                 (` (style (~ style)))

                 _
                 style)]
    (wrap (list (` (rule' (~ selector) (~ style') ((get@ #M;join Monad<List>) (list (~@ children)))))))))

(def: #export (css rules)
  (-> Rule-Set CSS)
  (text;join-with "\n" rules))
