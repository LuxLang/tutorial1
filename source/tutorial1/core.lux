##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;import lux
         (lux (codata io)
              (data maybe
                    (text #as t)
                    (list #refer #all #open ("" List/Functor))
                    (number #open ("i:" Int/Show)))
              (host jvm)
              (meta lux
                    (ast #as ast)
                    syntax))
         (.. (html #as &html)
             (css #as &css)))

## [Types]
(deftype #export HttpMethod
  (| #GET
     #POST
     #PUT
     #DELETE
     #HEAD
     #PATCH
     #CONNECT
     #OPTIONS
     #TRACE))

(deftype #export Port Int)

(deftype #export HttpHeaders (List (, Text Text)))

(deftype #export HttpParams (List (, Text Text)))

(deftype #export URL Text)

(deftype #export URI Text)

(deftype #export HttpBody
  (Array (^ byte)))

(deftype #export HttpRequest
  (& #request-method  HttpMethod
     #request-uri     URI
     #request-headers HttpHeaders
     #request-params  HttpParams
     #request-body    HttpBody))

(deftype #export HttpStatus  Int)

(deftype #export HttpResponse
  (& #response-status  HttpStatus
     #response-headers HttpHeaders
     #response-body    HttpBody))

(deftype #export RequestHandler
  (-> HttpRequest (IO HttpResponse)))

## [Values]
(do-template [<name> <code>]
  [(def #export <name> HttpStatus <code>)]

  [ok-status        200]
  [not-found-status 400]
  [error-status     500])

(def #export empty-headers
  HttpHeaders
  (@list))

## [Host]
(jvm-import java.lang.String
  (getBytes [] [] (Array byte)))

## [Syntax]
(defsyntax #export (@headers [headers (record^ (*^ (&^ text^ id^)))])
  (:: Lux/Monad (wrap (@list (` (@list (~@ (map (: (-> (, Text AST) AST)
                                                   (lambda [[key val]]
                                                     (` [(~ (ast;text key)) (~ val)])))
                                                headers))))))))

## [Functions]
(def empty-response-body (String::getBytes [] ""))

(def #export (add-header name value headers)
  (-> Text Text HttpHeaders HttpHeaders)
  (#;Cons [name value] headers))

(def #export (html-response status body)
  (-> HttpStatus &html;Html HttpResponse)
  (let [body-bytes (String::getBytes [] body)]
    {#response-status status
     #response-headers (|> empty-headers
                           (add-header "Content-Length" (i:show (array-length body-bytes)))
                           (add-header "Content-Type" "text/html"))
     #response-body body-bytes}))

(def #export (css-response css)
  (-> &css;CSS HttpResponse)
  (let [css-bytes (String::getBytes [] css)]
    {#response-status 200
     #response-headers (|> empty-headers
                           (add-header "Content-Length" (i:show (array-length css-bytes)))
                           (add-header "Content-Type" "text/css"))
     #response-body css-bytes}))

(def #export (redirect to)
  (-> URL HttpResponse)
  {#response-status 307
   #response-headers (|> empty-headers
                         (add-header "Content-Length" "0")
                         (add-header "Content-Type" "text/html")
                         (add-header "Location" to))
   #response-body empty-response-body})

(def #export (HttpMethod$ name)
  (-> Text (Maybe HttpMethod))
  (case name
    "GET"     (#;Some #GET)
    "POST"    (#;Some #POST)
    "PUT"     (#;Some #PUT)
    "DELETE"  (#;Some #DELETE)
    "HEAD"    (#;Some #HEAD)
    "PATCH"   (#;Some #PATCH)
    "CONNECT" (#;Some #CONNECT)
    "TRACE"   (#;Some #TRACE)
    "OPTIONS" (#;Some #OPTIONS)
    _         #;None))

(deftype #export Task
  (& #completed? Bool
     #description Text))
