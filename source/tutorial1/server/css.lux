##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;import lux
         (lux (data [text "Text/" Text/Monoid]
                    text/format
                    [list #* "" List/Functor List/Fold])
              [meta]
              (meta syntax
                    [ast])
              (control ["M" monad])))

## [Types]
(type: #export Selector
  Text)

(type: #export Style
  {#;doc "The properties associated with a CSS selector."}
  (List [Text Text]))

(type: #export CssRule Text)

(type: #export RuleSet (List CssRule))

(type: #export CSS Text)

## [Syntax]
(def: style^
  (Syntax (List [Text AST]))
  (record^ (*^ (&^ text^ id^))))

(syntax: #export (@style [style style^])
  (wrap (list (` (: Style
                    (list (~@ (map (: (-> [Text AST] AST)
                                      (lambda [[key val]]
                                        (` [(~ (ast;text key)) (~ val)])))
                                   style))))))))

## [Functions]
(def: (style->text style)
  (-> Style Text)
  (|> style
      (map (lambda [[key val]] (<> key ": " val)))
      (text;join-with "; ")))

(def: #export (rule' selector style children)
  (-> Selector Style RuleSet RuleSet)
  (let [selector-prefix (Text/++ selector " ")]
    (list& (<> selector-prefix "{" (style->text style) "}")
           (map (Text/++ selector-prefix) children))))

(syntax: #export (rule [selector id^] style [children (*^ id^)])
  (let [style' (case style
                 [_ (#;RecordS _)]
                 (` (@style (~ style)))

                 _
                 style)]
    (wrap (list (` (rule' (~ selector) (~ style') ((get@ #M;join List/Monad) (list (~@ children)))))))))

(def: #export (@css rules)
  (-> RuleSet CSS)
  (text;join-with "\n" rules))
